/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "/~/libs/svelte/internal/index.mjs";

import VimEditor from "./vim.svelte";
import CodeMirrorEditor from "./codemirror.svelte";
import Viewer from "./viewer.svelte";
import Add from "./add.svelte";
import AFButton from "../ui/button.svelte";
import Toolbar from "./toolbar.svelte";
import Navigation from "./navigation.svelte";
import { showNavigation, loadTree, saveFile } from "./editor.js";
import { onMount } from "/~/libs/svelte/index.mjs";
import { compile } from "/~/libs/svelte/compiler.mjs";

function add_css() {
	var style = element("style");
	style.id = "svelte-18wrgxe-style";
	style.textContent = "ul.svelte-18wrgxe.svelte-18wrgxe{list-style-type:none;margin:0;padding:0;text-align:center}header.svelte-18wrgxe.svelte-18wrgxe{height:2em;display:flex;align-items:center}header.svelte-18wrgxe img.svelte-18wrgxe{height:2em;padding:0.2em;margin-left:0.2em}header.svelte-18wrgxe ul.svelte-18wrgxe{margin-left:auto;margin-right:1em;display:flex}main.svelte-18wrgxe.svelte-18wrgxe{display:flex}.editor-container.svelte-18wrgxe.svelte-18wrgxe{display:flex;flex-direction:column;height:calc(100vh - 2.5em);width:calc(100vw - 3.5em);margin:0px;padding:0px;overflow:hidden}.editor-container.svelte-18wrgxe .editor.svelte-18wrgxe{height:100%}.editor-container.has-error.svelte-18wrgxe .editor.svelte-18wrgxe{height:80%}.editor-container.half.svelte-18wrgxe.svelte-18wrgxe{width:50vw}.editor-container.with-nav.svelte-18wrgxe.svelte-18wrgxe{width:calc(100vw - 250px)}.editor-container.half.with-nav.svelte-18wrgxe.svelte-18wrgxe{width:calc(50vw - 10em)}.errors-container.svelte-18wrgxe.svelte-18wrgxe{overflow:auto;position:relative;z-index:10}.errors.svelte-18wrgxe.svelte-18wrgxe{height:100%;overflow:auto;font-size:var(--font-size-xs)}.errors.svelte-18wrgxe div.svelte-18wrgxe{color:var(--color-accent-primary-lightest);padding:0.25em}.errors.svelte-18wrgxe .error.svelte-18wrgxe{background-color:var(--color-accent-secondary-dark)}.errors.svelte-18wrgxe .warning.svelte-18wrgxe{background-color:var(--color-accent-secondary-default)}.errors.svelte-18wrgxe code.svelte-18wrgxe{display:block;white-space:pre-wrap;padding:0.25em;margin:0.25em;color:var(--color-neutral-primary-lighter)}.discard-button.svelte-18wrgxe.svelte-18wrgxe{position:absolute;top:0;right:0;padding:0.25em}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (119:8) {#if !useVim}
function create_if_block_8(ctx) {
	let li;
	let afbutton;
	let current;

	afbutton = new AFButton({
			props: {
				kind: "primary",
				aspect: "basic",
				icon: "check",
				label: "Save",
				size: "small"
			}
		});

	afbutton.$on("click", /*triggerSave*/ ctx[12]);

	return {
		c() {
			li = element("li");
			create_component(afbutton.$$.fragment);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(afbutton, li, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(afbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(afbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(afbutton);
		}
	};
}

// (125:8) {#if type === 'File'}
function create_if_block_6(ctx) {
	let t;
	let li;
	let afbutton;
	let current;
	let if_block = /*play*/ ctx[5] && create_if_block_7(ctx);

	afbutton = new AFButton({
			props: {
				kind: "primary",
				aspect: "basic",
				icon: "play",
				label: "Play",
				size: "small",
				active: /*play*/ ctx[5]
			}
		});

	afbutton.$on("click", /*togglePlay*/ ctx[11]);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			li = element("li");
			create_component(afbutton.$$.fragment);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, li, anchor);
			mount_component(afbutton, li, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*play*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*play*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const afbutton_changes = {};
			if (dirty & /*play*/ 32) afbutton_changes.active = /*play*/ ctx[5];
			afbutton.$set(afbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(afbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(afbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(li);
			destroy_component(afbutton);
		}
	};
}

// (126:12) {#if play}
function create_if_block_7(ctx) {
	let li;
	let afbutton;
	let current;

	afbutton = new AFButton({
			props: {
				aspect: "basic",
				icon: "refresh",
				label: "Refresh",
				size: "small"
			}
		});

	afbutton.$on("click", /*refreshViewer*/ ctx[15]);

	return {
		c() {
			li = element("li");
			create_component(afbutton.$$.fragment);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(afbutton, li, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(afbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(afbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(afbutton);
		}
	};
}

// (141:4) {#if $showNavigation}
function create_if_block_5(ctx) {
	let navigation;
	let current;
	navigation = new Navigation({});

	return {
		c() {
			create_component(navigation.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navigation, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navigation.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navigation, detaching);
		}
	};
}

// (146:12) {#if type === 'Directory'}
function create_if_block_4(ctx) {
	let add;
	let current;
	add = new Add({});

	return {
		c() {
			create_component(add.$$.fragment);
		},
		m(target, anchor) {
			mount_component(add, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(add.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(add.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(add, detaching);
		}
	};
}

// (151:12) {:else}
function create_else_block(ctx) {
	let codemirroreditor;
	let current;
	let codemirroreditor_props = { context: /*_context*/ ctx[4] };
	codemirroreditor = new CodeMirrorEditor({ props: codemirroreditor_props });
	/*codemirroreditor_binding*/ ctx[17](codemirroreditor);
	codemirroreditor.$on("save", /*save*/ ctx[13]);

	return {
		c() {
			create_component(codemirroreditor.$$.fragment);
		},
		m(target, anchor) {
			mount_component(codemirroreditor, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const codemirroreditor_changes = {};
			if (dirty & /*_context*/ 16) codemirroreditor_changes.context = /*_context*/ ctx[4];
			codemirroreditor.$set(codemirroreditor_changes);
		},
		i(local) {
			if (current) return;
			transition_in(codemirroreditor.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(codemirroreditor.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			/*codemirroreditor_binding*/ ctx[17](null);
			destroy_component(codemirroreditor, detaching);
		}
	};
}

// (149:12) {#if useVim}
function create_if_block_3(ctx) {
	let vimeditor;
	let current;
	vimeditor = new VimEditor({ props: { context: /*_context*/ ctx[4] } });
	vimeditor.$on("save", /*save*/ ctx[13]);

	return {
		c() {
			create_component(vimeditor.$$.fragment);
		},
		m(target, anchor) {
			mount_component(vimeditor, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const vimeditor_changes = {};
			if (dirty & /*_context*/ 16) vimeditor_changes.context = /*_context*/ ctx[4];
			vimeditor.$set(vimeditor_changes);
		},
		i(local) {
			if (current) return;
			transition_in(vimeditor.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(vimeditor.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(vimeditor, detaching);
		}
	};
}

// (155:8) {#if hasError }
function create_if_block_1(ctx) {
	let div1;
	let span;
	let afbutton;
	let t0;
	let div0;
	let t1;
	let current;

	afbutton = new AFButton({
			props: {
				aspect: "solid",
				icon: "cross",
				label: "Discard",
				size: "small"
			}
		});

	afbutton.$on("click", /*discardErrors*/ ctx[14]);
	let if_block = /*error*/ ctx[0] && create_if_block_2(ctx);
	let each_value = /*warnings*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			create_component(afbutton.$$.fragment);
			t0 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "discard-button svelte-18wrgxe");
			attr(div0, "class", "errors svelte-18wrgxe");
			attr(div1, "class", "errors-container svelte-18wrgxe");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			mount_component(afbutton, span, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
			append(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*error*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div0, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*warnings*/ 2) {
				each_value = /*warnings*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(afbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(afbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(afbutton);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};
}

// (162:20) {#if error}
function create_if_block_2(ctx) {
	let div;
	let t0_value = /*error*/ ctx[0].message + "";
	let t0;
	let code;
	let t1_value = /*error*/ ctx[0].frame + "";
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			code = element("code");
			t1 = text(t1_value);
			attr(code, "class", "svelte-18wrgxe");
			attr(div, "class", "error svelte-18wrgxe");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, code);
			append(code, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*error*/ 1 && t0_value !== (t0_value = /*error*/ ctx[0].message + "")) set_data(t0, t0_value);
			if (dirty & /*error*/ 1 && t1_value !== (t1_value = /*error*/ ctx[0].frame + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (163:20) {#each warnings as warning}
function create_each_block(ctx) {
	let div;
	let t0_value = /*warning*/ ctx[20].message + "";
	let t0;
	let t1;
	let code;
	let t2_value = /*warning*/ ctx[20].frame + "";
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			code = element("code");
			t2 = text(t2_value);
			t3 = space();
			attr(code, "class", "svelte-18wrgxe");
			attr(div, "class", "warning svelte-18wrgxe");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, code);
			append(code, t2);
			append(div, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*warnings*/ 2 && t0_value !== (t0_value = /*warning*/ ctx[20].message + "")) set_data(t0, t0_value);
			if (dirty & /*warnings*/ 2 && t2_value !== (t2_value = /*warning*/ ctx[20].frame + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (173:4) {#if play}
function create_if_block(ctx) {
	let viewer_1;
	let current;
	let viewer_1_props = { componentPath: /*componentPath*/ ctx[6] };
	viewer_1 = new Viewer({ props: viewer_1_props });
	/*viewer_1_binding*/ ctx[18](viewer_1);

	return {
		c() {
			create_component(viewer_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewer_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const viewer_1_changes = {};
			if (dirty & /*componentPath*/ 64) viewer_1_changes.componentPath = /*componentPath*/ ctx[6];
			viewer_1.$set(viewer_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewer_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewer_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			/*viewer_1_binding*/ ctx[18](null);
			destroy_component(viewer_1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let link;
	let t0;
	let header;
	let img;
	let img_src_value;
	let t1;
	let ul;
	let t2;
	let t3;
	let main;
	let toolbar;
	let t4;
	let t5;
	let div1;
	let div0;
	let t6;
	let current_block_type_index;
	let if_block4;
	let t7;
	let div1_class_value;
	let t8;
	let current;
	let if_block0 = !/*useVim*/ ctx[10] && create_if_block_8(ctx);
	let if_block1 = /*type*/ ctx[2] === "File" && create_if_block_6(ctx);
	toolbar = new Toolbar({});
	let if_block2 = /*$showNavigation*/ ctx[9] && create_if_block_5(ctx);
	let if_block3 = /*type*/ ctx[2] === "Directory" && create_if_block_4(ctx);
	const if_block_creators = [create_if_block_3, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*useVim*/ ctx[10]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block4 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block5 = /*hasError*/ ctx[3] && create_if_block_1(ctx);
	let if_block6 = /*play*/ ctx[5] && create_if_block(ctx);

	return {
		c() {
			link = element("link");
			t0 = space();
			header = element("header");
			img = element("img");
			t1 = space();
			ul = element("ul");
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			main = element("main");
			create_component(toolbar.$$.fragment);
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block3) if_block3.c();
			t6 = space();
			if_block4.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			attr(link, "rel", "stylesheet");
			attr(link, "href", "/~/abfab/pastanaga/pastanaga.css");
			if (img.src !== (img_src_value = "/~/abfab/abfab.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "AbFab logo");
			attr(img, "class", "svelte-18wrgxe");
			attr(ul, "class", "svelte-18wrgxe");
			attr(header, "class", "svelte-18wrgxe");
			attr(div0, "class", "editor svelte-18wrgxe");
			attr(div1, "class", div1_class_value = "editor-container " + (/*play*/ ctx[5] ? "half" : "") + " svelte-18wrgxe");
			toggle_class(div1, "with-nav", /*$showNavigation*/ ctx[9]);
			toggle_class(div1, "has-error", /*hasError*/ ctx[3]);
			attr(main, "class", "svelte-18wrgxe");
		},
		m(target, anchor) {
			append(document.head, link);
			insert(target, t0, anchor);
			insert(target, header, anchor);
			append(header, img);
			append(header, t1);
			append(header, ul);
			if (if_block0) if_block0.m(ul, null);
			append(ul, t2);
			if (if_block1) if_block1.m(ul, null);
			insert(target, t3, anchor);
			insert(target, main, anchor);
			mount_component(toolbar, main, null);
			append(main, t4);
			if (if_block2) if_block2.m(main, null);
			append(main, t5);
			append(main, div1);
			append(div1, div0);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t6);
			if_blocks[current_block_type_index].m(div0, null);
			append(div1, t7);
			if (if_block5) if_block5.m(div1, null);
			append(main, t8);
			if (if_block6) if_block6.m(main, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*useVim*/ ctx[10]) if_block0.p(ctx, dirty);

			if (/*type*/ ctx[2] === "File") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*type*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*$showNavigation*/ ctx[9]) {
				if (if_block2) {
					if (dirty & /*$showNavigation*/ 512) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(main, t5);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*type*/ ctx[2] === "Directory") {
				if (if_block3) {
					if (dirty & /*type*/ 4) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_4(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t6);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if_block4.p(ctx, dirty);

			if (/*hasError*/ ctx[3]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty & /*hasError*/ 8) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_1(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(div1, null);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*play*/ 32 && div1_class_value !== (div1_class_value = "editor-container " + (/*play*/ ctx[5] ? "half" : "") + " svelte-18wrgxe")) {
				attr(div1, "class", div1_class_value);
			}

			if (dirty & /*play, $showNavigation*/ 544) {
				toggle_class(div1, "with-nav", /*$showNavigation*/ ctx[9]);
			}

			if (dirty & /*play, hasError*/ 40) {
				toggle_class(div1, "has-error", /*hasError*/ ctx[3]);
			}

			if (/*play*/ ctx[5]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty & /*play*/ 32) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(main, null);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(toolbar.$$.fragment, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(toolbar.$$.fragment, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			detach(link);
			if (detaching) detach(t0);
			if (detaching) detach(header);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t3);
			if (detaching) detach(main);
			destroy_component(toolbar);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if_blocks[current_block_type_index].d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
		}
	};
}

function updateErrors() {
	window.dispatchEvent(new Event("resize"));
}

function instance($$self, $$props, $$invalidate) {
	let hasError;
	let $showNavigation;
	component_subscribe($$self, showNavigation, $$value => $$invalidate(9, $showNavigation = $$value));
	let { context } = $$props;
	let _context = "";
	let error;
	let warnings = [];
	let type;
	let useVim = localStorage.getItem("useVim") ? true : false;
	const RE = new RegExp(/from "(.+\/svelte(\/\w+){0,1})";/g);
	let play = false;
	let componentPath;
	let viewer;
	let codemirror;

	function togglePlay() {
		$$invalidate(6, componentPath = location.pathname.replace("/@edit", ""));
		$$invalidate(5, play = !play);
		window.dispatchEvent(new Event("resize"));
	}

	function triggerSave() {
		if (codemirror) {
			codemirror.saveFile();
		}
	}

	async function save(event) {
		const source = event.detail;
		const ABFAB_ROOT = "/~";
		let js = "";
		const pathname = location.pathname.replace("/~/", "/").replace("/@edit", "");
		const isSvelte = pathname.endsWith(".svelte");

		if (isSvelte) {
			try {
				const result = compile(source, { sveltePath: ABFAB_ROOT + "/libs/svelte" });
				$$invalidate(0, error = undefined);
				js = result.js;
				const warningsFixed = result.warnings.length === 0 && warnings.length > 0;
				$$invalidate(1, warnings = result.warnings);

				if (warningsFixed) {
					updateErrors();
				}
			} catch(e) {
				$$invalidate(0, error = e);
			}
		}

		if (!error) {
			await saveFile(pathname, type, source);

			if (isSvelte) {
				const jsFilePath = pathname + ".js";
				await saveFile(jsFilePath, "File", js.code.replace(RE, "from \"$1/index.mjs\";"));
			}

			refreshViewer();
		}
	}

	function discardErrors() {
		$$invalidate(0, error = undefined);
		$$invalidate(1, warnings = []);
		updateErrors();
	}

	function refreshViewer() {
		if (viewer) {
			viewer.refresh();
		}
	}

	onMount(() => {
		console.log(`Wheels on fire,\nRolling down the road.\nBest notify my next of kin\nThis wheel shall explode!\n\n`);
		loadTree();
	});

	function codemirroreditor_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			codemirror = $$value;
			$$invalidate(8, codemirror);
		});
	}

	function viewer_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			viewer = $$value;
			$$invalidate(7, viewer);
		});
	}

	$$self.$$set = $$props => {
		if ("context" in $$props) $$invalidate(16, context = $$props.context);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*context, type*/ 65540) {
			$: {
				let obj;

				try {
					obj = JSON.parse(context);
					$$invalidate(2, type = obj.type_name);
				} catch(e) {
					$$invalidate(2, type = "File");
				}

				if (type === "File") {
					$$invalidate(4, _context = context);
				} else if (type === "Content") {
					$$invalidate(4, _context = JSON.stringify(obj.data));
				} else if (type === "Directory") {
					$$invalidate(4, _context = "{\"views\": {}}");
				}
			}
		}

		if ($$self.$$.dirty & /*error, warnings*/ 3) {
			$: $$invalidate(3, hasError = !!error || warnings.length > 0);
		}

		if ($$self.$$.dirty & /*hasError*/ 8) {
			$: if (hasError) {
				updateErrors();
			}
		}
	};

	return [
		error,
		warnings,
		type,
		hasError,
		_context,
		play,
		componentPath,
		viewer,
		codemirror,
		$showNavigation,
		useVim,
		togglePlay,
		triggerSave,
		save,
		discardErrors,
		refreshViewer,
		context,
		codemirroreditor_binding,
		viewer_1_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-18wrgxe-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { context: 16 });
	}
}

export default Component;