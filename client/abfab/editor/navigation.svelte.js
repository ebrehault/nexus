/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "/db/my-app/node_modules/svelte/internal/index.mjs";

import { EditorStore } from "./editor.js";
import NavItem from "./navigation.item.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-14tl1o1-style";
	style.textContent = "nav.svelte-14tl1o1{width:12em;background-color:var(--color-neutral-primary-lighter);padding:0.5em 0.5em 0.5em 0;overflow:auto;height:calc(100vh - 40px);font-size:var(--font-size-s)}nav.svelte-14tl1o1 ul{list-style-type:none;padding-left:0.5em}nav.svelte-14tl1o1 svg{fill:var(--color-neutral-secondary-light);cursor:hand}nav.svelte-14tl1o1 ul li:not(.level-1){border-left:1px solid var(--color-neutral-secondary-lighter);padding-left:0.5em;white-space:nowrap}nav.svelte-14tl1o1 a{color:var(--color-neutral-secondary-default)}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (7:8) {#each $EditorStore.tree as item}
function create_each_block(ctx) {
	let li;
	let navitem;
	let current;
	navitem = new NavItem({ props: { item: /*item*/ ctx[1] } });

	return {
		c() {
			li = element("li");
			create_component(navitem.$$.fragment);
			attr(li, "class", "level-1");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(navitem, li, null);
			current = true;
		},
		p(ctx, dirty) {
			const navitem_changes = {};
			if (dirty & /*$EditorStore*/ 1) navitem_changes.item = /*item*/ ctx[1];
			navitem.$set(navitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(navitem);
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let ul;
	let current;
	let each_value = /*$EditorStore*/ ctx[0].tree;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			nav = element("nav");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(nav, "class", "svelte-14tl1o1");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*$EditorStore*/ 1) {
				each_value = /*$EditorStore*/ ctx[0].tree;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $EditorStore;
	component_subscribe($$self, EditorStore, $$value => $$invalidate(0, $EditorStore = $$value));
	return [$EditorStore];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-14tl1o1-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;