/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	globals,
	init,
	insert,
	noop,
	safe_not_equal
} from "/~/node_modules/svelte/internal/index.mjs";

const { document: document_1 } = globals;

import {
	VimWasm,
	checkBrowserCompatibility
} from "/~/node_modules/vim-wasm/vimwasm.js";

import { EditorStore } from "./editor.js";
import { createEventDispatcher } from "/~/node_modules/svelte/index.mjs";

function add_css() {
	var style = element("style");
	style.id = "svelte-1oxn4tw-style";
	style.textContent = "#vim-editor.svelte-1oxn4tw{margin:0px;width:100%;height:100%;background-color:#282c33}#vim-canvas.svelte-1oxn4tw{padding:0px;width:100%;height:100%}#vim-input.svelte-1oxn4tw{width:1px;color:transparent;background-color:transparent;padding:0px;border:0px;outline:none;vertical-align:middle;position:absolute;top:0px;left:0px}";
	append(document_1.head, style);
}

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<canvas id="vim-canvas" class="svelte-1oxn4tw"></canvas> 
    <input id="vim-input" autocomplete="off" autofocus="" class="svelte-1oxn4tw"/>`;

			attr(div, "id", "vim-editor");
			attr(div, "class", "svelte-1oxn4tw");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $EditorStore;
	component_subscribe($$self, EditorStore, $$value => $$invalidate(4, $EditorStore = $$value));
	let { context } = $$props;
	let { type } = $$props;
	let vim;
	let pathname = location.pathname.replace("/~/", "/").replace("/@edit", "");
	const dispatch = createEventDispatcher();

	function initVim() {
		const filename = pathname.split("/").pop();
		const isSvelte = filename.endsWith(".svelte");
		const errmsg = checkBrowserCompatibility();

		if (errmsg !== undefined) {
			alert(errmsg);
		}

		const screenCanvasElement = document.getElementById("vim-canvas");

		$$invalidate(2, vim = new VimWasm({
				canvas: screenCanvasElement,
				input: document.getElementById("vim-input"),
				workerScriptPath: "/~/node_modules/vim-wasm/vim.js"
			}));

		// Handle drag and drop
		function cancel(e) {
			e.stopPropagation();
			e.preventDefault();
		}

		screenCanvasElement.addEventListener(
			"dragover",
			e => {
				cancel(e);

				if (e.dataTransfer) {
					e.dataTransfer.dropEffect = "copy";
				}
			},
			false
		);

		screenCanvasElement.addEventListener(
			"drop",
			e => {
				cancel(e);

				if (e.dataTransfer) {
					vim.dropFiles(e.dataTransfer.files).catch(console.error);
				}
			},
			false
		);

		$$invalidate(
			2,
			vim.onVimExit = status => {
				alert(`Vim exited with status ${status}`);
			},
			vim
		);

		$$invalidate(
			2,
			vim.onFileExport = (fullpath, contents) => {
				const decoder = new TextDecoder("utf-8");
				const source = decoder.decode(contents);
				dispatch("save", source);
			},
			vim
		);

		$$invalidate(2, vim.readClipboard = navigator.clipboard.readText, vim);
		$$invalidate(2, vim.onWriteClipboard = navigator.clipboard.writeText, vim);
		$$invalidate(2, vim.onError = console.error, vim);
		const options = ["set number"];

		if (isSvelte) {
			options.push("set filetype=html");
		}

		options.push("autocmd BufWritePost * export");

		vim.start({
			cmdArgs: [pathname, "-c", options.join("\n")],
			dirs: $EditorStore.dirs,
			files: { [pathname]: context }
		});
	}

	$$self.$$set = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
		if ("type" in $$props) $$invalidate(1, type = $$props.type);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*vim, $EditorStore*/ 20) {
			$: if (!vim && $EditorStore.dirs.length > 0) {
				try {
					initVim();
				} catch(e) {
					console.log(e);
				}
			}
		}

		if ($$self.$$.dirty & /*vim, pathname, context*/ 13) {
			$: if (vim) {
				const _pathname = location.pathname.replace("/~/", "/").replace("/@edit", "");

				if (_pathname !== pathname) {
					const enc = new TextEncoder();
					vim.dropFile(_pathname.slice(1), enc.encode(context));
					$$invalidate(3, pathname = _pathname);
				}
			}
		}
	};

	return [context, type, vim, pathname, $EditorStore];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-1oxn4tw-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { context: 0, type: 1 });
	}
}

export default Component;