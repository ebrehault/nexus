/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init as init_1,
	insert,
	noop,
	safe_not_equal,
	space
} from "/~/libs/svelte/internal/index.mjs";

import { onMount } from "/~/libs/svelte/index.mjs";
import { createEventDispatcher } from "/~/libs/svelte/index.mjs";

function add_css() {
	var style = element("style");
	style.id = "svelte-11exmak-style";
	style.textContent = "textarea.svelte-11exmak{display:none}.CodeMirror{width:100%;height:calc(100vh - 40px) !important}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let textarea_1;
	let t;
	let link0;
	let link1;

	return {
		c() {
			textarea_1 = element("textarea");
			t = space();
			link0 = element("link");
			link1 = element("link");
			attr(textarea_1, "class", "svelte-11exmak");
			attr(link0, "rel", "stylesheet");
			attr(link0, "href", "/~/libs/codemirror/lib/codemirror.css");
			attr(link1, "rel", "stylesheet");
			attr(link1, "href", "/~/libs/codemirror/theme/blackboard.css");
		},
		m(target, anchor) {
			insert(target, textarea_1, anchor);
			/*textarea_1_binding*/ ctx[4](textarea_1);
			insert(target, t, anchor);
			append(document.head, link0);
			append(document.head, link1);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(textarea_1);
			/*textarea_1_binding*/ ctx[4](null);
			if (detaching) detach(t);
			detach(link0);
			detach(link1);
		}
	};
}

async function loadPlugins() {
	await import("/~/libs/codemirror/addon/mode/simple.js");
	await import("/~/libs/codemirror/addon/mode/multiplex.js");
	await import("/~/libs/codemirror/mode/javascript/javascript.js");
	await import("/~/libs/codemirror/mode/handlebars/handlebars.js");
	await import("/~/libs/codemirror/mode/htmlmixed/htmlmixed.js");
	await import("/~/libs/codemirror/mode/xml/xml.js");
	await import("/~/libs/codemirror/mode/css/css.js");
	await import("/~/libs/codemirror/mode/markdown/markdown.js");
	await import("/~/libs/codemirror/addon/edit/closebrackets.js");
	await import("/~/libs/codemirror/addon/edit/closetag.js");
	await import("/~/libs/codemirror/addon/edit/continuelist.js");
	await import("/~/libs/codemirror/addon/comment/comment.js");
	await import("/~/libs/codemirror/addon/fold/foldcode.js");
	await import("/~/libs/codemirror/addon/fold/foldgutter.js");
	await import("/~/libs/codemirror/addon/fold/brace-fold.js");
	await import("/~/libs/codemirror/addon/fold/xml-fold.js");
	await import("/~/libs/codemirror/addon/fold/indent-fold.js");
	await import("/~/libs/codemirror/addon/fold/markdown-fold.js");
	await import("/~/libs/codemirror/addon/fold/comment-fold.js");
}

function instance($$self, $$props, $$invalidate) {
	let { context } = $$props;
	let textarea;
	let codeMirror;
	const dispatch = createEventDispatcher();

	const modes = {
		js: { name: "javascript", json: false },
		json: { name: "javascript", json: true },
		svelte: { name: "handlebars", base: "text/html" },
		md: { name: "markdown" }
	};

	function saveFile(value) {
		if (!value) {
			value = codeMirror.getValue();
		}

		dispatch("save", value);
	}

	onMount(async () => {
		if (!window.CodeMirror) {
			await import("/~/libs/codemirror/lib/codemirror.js");
			await loadPlugins();
			init();
		}
	});

	function init() {
		const opts = {
			lineNumbers: true,
			lineWrapping: true,
			indentWithTabs: false,
			indentUnit: 4,
			tabSize: 4,
			value: "",
			autoCloseBrackets: true,
			autoCloseTags: true,
			extraKeys: {
				"Enter": "newlineAndIndentContinueMarkdownList",
				"Ctrl-/": "toggleComment",
				"Cmd-/": "toggleComment",
				"Ctrl-Q"(cm) {
					cm.foldCode(cm.getCursor());
				},
				"Cmd-Q"(cm) {
					cm.foldCode(cm.getCursor());
				},
				"Ctrl-S"(cm) {
					saveFile(cm.getValue());
				},
				"Cmd-S"(cm) {
					saveFile(cm.getValue());
				}
			},
			foldGutter: true,
			gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
			theme: "blackboard"
		};

		$$invalidate(3, codeMirror = CodeMirror.fromTextArea(textarea, opts));
		codeMirror.setValue(context);
		setMode();
	}

	

	function setMode() {
		const filename = location.pathname.replace("/@edit", "").split("/").pop();

		const mode = filename.includes(".")
		? filename.split(".").pop()
		: "json";

		codeMirror.setOption("mode", modes[mode] || { name: mode });
	}

	function textarea_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			textarea = $$value;
			$$invalidate(0, textarea);
		});
	}

	$$self.$$set = $$props => {
		if ("context" in $$props) $$invalidate(1, context = $$props.context);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*codeMirror, context*/ 10) {
			$: if (codeMirror) {
				codeMirror.setValue(context);
				setMode();
			}
		}
	};

	return [textarea, context, saveFile, codeMirror, textarea_1_binding];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-11exmak-style")) add_css();
		init_1(this, options, instance, create_fragment, safe_not_equal, { context: 1, saveFile: 2 });
	}

	get saveFile() {
		return this.$$.ctx[2];
	}
}

export default Component;