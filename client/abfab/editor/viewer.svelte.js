/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "/~/node_modules/svelte/internal/index.mjs";

import AFInput from "/~/abfab/ui/input.svelte";
import AFTextarea from "/~/abfab/ui/textarea.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-15ogg5q-style";
	style.textContent = "section.svelte-15ogg5q{margin-left:1em;width:calc(50vw - 5em)}iframe.svelte-15ogg5q{width:100%;border:1px solid var(--color-neutral-secondary-default);border-radius:.125rem;display:block;height:50vh;margin-bottom:2em}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let section;
	let iframe_1;
	let iframe_1_src_value;
	let t0;
	let afinput;
	let updating_value;
	let t1;
	let aftextarea;
	let updating_value_1;
	let current;

	function afinput_value_binding(value) {
		/*afinput_value_binding*/ ctx[8](value);
	}

	let afinput_props = {
		id: "content",
		label: "Content path",
		placeholder: "/path/to/content",
		hint: "The corresponding data content will be rendered using the current component."
	};

	if (/*contentPath*/ ctx[1] !== void 0) {
		afinput_props.value = /*contentPath*/ ctx[1];
	}

	afinput = new AFInput({ props: afinput_props });
	binding_callbacks.push(() => bind(afinput, "value", afinput_value_binding));

	function aftextarea_value_binding(value) {
		/*aftextarea_value_binding*/ ctx[9](value);
	}

	let aftextarea_props = {
		id: "data",
		label: "Data",
		placeholder: "[1, 2, 3]",
		disabled: !!/*contentPath*/ ctx[1],
		error: /*dataError*/ ctx[2] ? "Invalid JSON" : "",
		hint: "If you do not have any relevant data content, you can just put a JSON sample here. (Content path will take precedence)"
	};

	if (/*jsonData*/ ctx[3] !== void 0) {
		aftextarea_props.value = /*jsonData*/ ctx[3];
	}

	aftextarea = new AFTextarea({ props: aftextarea_props });
	binding_callbacks.push(() => bind(aftextarea, "value", aftextarea_value_binding));

	return {
		c() {
			section = element("section");
			iframe_1 = element("iframe");
			t0 = space();
			create_component(afinput.$$.fragment);
			t1 = space();
			create_component(aftextarea.$$.fragment);
			if (iframe_1.src !== (iframe_1_src_value = /*path*/ ctx[0])) attr(iframe_1, "src", iframe_1_src_value);
			attr(iframe_1, "title", "Component viewer");
			attr(iframe_1, "class", "svelte-15ogg5q");
			attr(section, "class", "svelte-15ogg5q");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, iframe_1);
			/*iframe_1_binding*/ ctx[7](iframe_1);
			append(section, t0);
			mount_component(afinput, section, null);
			append(section, t1);
			mount_component(aftextarea, section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*path*/ 1 && iframe_1.src !== (iframe_1_src_value = /*path*/ ctx[0])) {
				attr(iframe_1, "src", iframe_1_src_value);
			}

			const afinput_changes = {};

			if (!updating_value && dirty & /*contentPath*/ 2) {
				updating_value = true;
				afinput_changes.value = /*contentPath*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			afinput.$set(afinput_changes);
			const aftextarea_changes = {};
			if (dirty & /*contentPath*/ 2) aftextarea_changes.disabled = !!/*contentPath*/ ctx[1];
			if (dirty & /*dataError*/ 4) aftextarea_changes.error = /*dataError*/ ctx[2] ? "Invalid JSON" : "";

			if (!updating_value_1 && dirty & /*jsonData*/ 8) {
				updating_value_1 = true;
				aftextarea_changes.value = /*jsonData*/ ctx[3];
				add_flush_callback(() => updating_value_1 = false);
			}

			aftextarea.$set(aftextarea_changes);
		},
		i(local) {
			if (current) return;
			transition_in(afinput.$$.fragment, local);
			transition_in(aftextarea.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(afinput.$$.fragment, local);
			transition_out(aftextarea.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			/*iframe_1_binding*/ ctx[7](null);
			destroy_component(afinput);
			destroy_component(aftextarea);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { componentPath } = $$props;

	const _componentPath = componentPath.startsWith("/")
	? `/~${componentPath}`
	: componentPath;

	let path = _componentPath;
	let contentPath = "";
	let dataError = false;
	let jsonData = "";
	let iframe;

	function displayData(value, timestamp) {
		try {
			const data = JSON.stringify(JSON.parse(value));
			$$invalidate(0, path = `${_componentPath}?time=${timestamp}&context=${data}`);
			$$invalidate(2, dataError = false);
		} catch(e) {
			$$invalidate(2, dataError = true);
		}
	}

	function refresh() {
		const timestamp = new Date().toISOString();

		if (contentPath) {
			$$invalidate(0, path = `${contentPath}?view=${_componentPath}&time=${timestamp}`);
		} else if (jsonData) {
			displayData(jsonData, timestamp);
		} else {
			$$invalidate(0, path = `${_componentPath}?time=${timestamp}`);
		}
	}

	function iframe_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			iframe = $$value;
			$$invalidate(4, iframe);
		});
	}

	function afinput_value_binding(value) {
		contentPath = value;
		$$invalidate(1, contentPath);
	}

	function aftextarea_value_binding(value) {
		jsonData = value;
		$$invalidate(3, jsonData);
	}

	$$self.$$set = $$props => {
		if ("componentPath" in $$props) $$invalidate(5, componentPath = $$props.componentPath);
	};

	return [
		path,
		contentPath,
		dataError,
		jsonData,
		iframe,
		componentPath,
		refresh,
		iframe_1_binding,
		afinput_value_binding,
		aftextarea_value_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-15ogg5q-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { componentPath: 5, refresh: 6 });
	}

	get refresh() {
		return this.$$.ctx[6];
	}
}

export default Component;