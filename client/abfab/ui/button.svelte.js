/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text,
	xlink_attr
} from "/db/my-app/node_modules/svelte/internal/index.mjs";

import { createEventDispatcher } from "/db/my-app/node_modules/svelte/index.mjs";

function create_fragment(ctx) {
	let button;
	let span1;
	let pa_icon;
	let svg;
	let use;
	let use_xlink_href_value;
	let svg_class_value;
	let t0;
	let span0;
	let t1;
	let button_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			span1 = element("span");
			pa_icon = element("pa-icon");
			svg = svg_element("svg");
			use = svg_element("use");
			t0 = space();
			span0 = element("span");
			t1 = text(/*label*/ ctx[0]);
			xlink_attr(use, "xlink:href", use_xlink_href_value = "/db/my-app/abfab/pastanaga/icons.svg#" + /*icon*/ ctx[1]);
			attr(svg, "class", svg_class_value = "pa-" + /*size*/ ctx[2]);
			attr(span0, "class", "pa-button-label pa-sr-only");
			attr(span1, "tabindex", "-1");
			attr(span1, "class", "pa-button-wrapper");
			attr(button, "class", button_class_value = "pa-button pa-" + /*size*/ ctx[2] + " pa-" + /*kind*/ ctx[4] + " pa-" + /*aspect*/ ctx[3] + " " + (/*active*/ ctx[5] ? "pa-active" : "") + " pa-button-icon");
			attr(button, "type", "button");
			attr(button, "aria-label", /*label*/ ctx[0]);
			attr(button, "tabindex", "0");
			button.disabled = /*disabled*/ ctx[6];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span1);
			append(span1, pa_icon);
			append(pa_icon, svg);
			append(svg, use);
			append(span1, t0);
			append(span1, span0);
			append(span0, t1);

			if (!mounted) {
				dispose = listen(button, "click", /*dispatchClick*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*icon*/ 2 && use_xlink_href_value !== (use_xlink_href_value = "/db/my-app/abfab/pastanaga/icons.svg#" + /*icon*/ ctx[1])) {
				xlink_attr(use, "xlink:href", use_xlink_href_value);
			}

			if (dirty & /*size*/ 4 && svg_class_value !== (svg_class_value = "pa-" + /*size*/ ctx[2])) {
				attr(svg, "class", svg_class_value);
			}

			if (dirty & /*label*/ 1) set_data(t1, /*label*/ ctx[0]);

			if (dirty & /*size, kind, aspect, active*/ 60 && button_class_value !== (button_class_value = "pa-button pa-" + /*size*/ ctx[2] + " pa-" + /*kind*/ ctx[4] + " pa-" + /*aspect*/ ctx[3] + " " + (/*active*/ ctx[5] ? "pa-active" : "") + " pa-button-icon")) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*label*/ 1) {
				attr(button, "aria-label", /*label*/ ctx[0]);
			}

			if (dirty & /*disabled*/ 64) {
				button.disabled = /*disabled*/ ctx[6];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { label } = $$props;
	let { icon } = $$props;
	let { size = "medium" } = $$props; // small, medium, large
	let { aspect = "solid" } = $$props; // solid or basic
	let { kind = "secondary" } = $$props; // primary, secondary, destructive
	let { active = false } = $$props;
	let { disabled = false } = $$props;
	const dispatch = createEventDispatcher();

	function dispatchClick(event) {
		dispatch("click", { event });
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("icon" in $$props) $$invalidate(1, icon = $$props.icon);
		if ("size" in $$props) $$invalidate(2, size = $$props.size);
		if ("aspect" in $$props) $$invalidate(3, aspect = $$props.aspect);
		if ("kind" in $$props) $$invalidate(4, kind = $$props.kind);
		if ("active" in $$props) $$invalidate(5, active = $$props.active);
		if ("disabled" in $$props) $$invalidate(6, disabled = $$props.disabled);
	};

	return [label, icon, size, aspect, kind, active, disabled, dispatchClick];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			icon: 1,
			size: 2,
			aspect: 3,
			kind: 4,
			active: 5,
			disabled: 6
		});
	}
}

export default Component;