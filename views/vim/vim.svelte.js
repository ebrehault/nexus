/* generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	globals,
	init,
	insert,
	noop,
	safe_not_equal
} from "/db/my-app/node_modules/svelte/internal/index.mjs";

const { document: document_1 } = globals;

import {
	VimWasm,
	checkBrowserCompatibility
} from "/db/my-app/node_modules/vim-wasm/vimwasm.js";

import { compile } from "/db/my-app/node_modules/svelte/compiler.mjs";
import { onMount } from "/db/my-app/node_modules/svelte/index.mjs";

function add_css() {
	var style = element("style");
	style.id = "svelte-xy4k9h-style";
	style.textContent = ".container.svelte-xy4k9h{display:flex;flex-direction:column;align-items:center;height:100vh;width:100vw;margin:0px;padding:0px;overflow:hidden}#vim-editor.svelte-xy4k9h{padding:2px;margin:0px;width:calc(100% - 4px);height:calc(100% - 4px);background-color:#282c33}#vim-canvas.svelte-xy4k9h{padding:0px;width:100%;height:100%}#vim-input.svelte-xy4k9h{width:1px;color:transparent;background-color:transparent;padding:0px;border:0px;outline:none;vertical-align:middle;position:absolute;top:0px;left:0px}";
	append(document_1.head, style);
}

function create_fragment(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");

			div1.innerHTML = `<div id="vim-editor" class="svelte-xy4k9h"><canvas id="vim-canvas" class="svelte-xy4k9h"></canvas> 
        <input id="vim-input" autocomplete="off" autofocus="" class="svelte-xy4k9h"/></div>`;

			attr(div1, "class", "container svelte-xy4k9h");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { context } = $$props;

	onMount(() => {
		initVim();
	});

	function initVim() {
		console.log(`Wheels on fire,\nRolling down the road.\nBest notify my next of kin\nThis wheel shall explode!\n\n`);
		const RE = new RegExp(/from "(.+\/svelte(\/\w+){0,1})";/g);
		const pathname = location.pathname.replace("/@edit", "");
		const filename = pathname.split("/").pop();
		const isSvelte = filename.endsWith(".svelte");
		const errmsg = checkBrowserCompatibility();

		if (errmsg !== undefined) {
			alert(errmsg);
		}

		const screenCanvasElement = document.getElementById("vim-canvas");

		const vim = new VimWasm({
				canvas: screenCanvasElement,
				input: document.getElementById("vim-input"),
				workerScriptPath: "/db/my-app/node_modules/vim-wasm/vim.js"
			});

		// Handle drag and drop
		function cancel(e) {
			e.stopPropagation();
			e.preventDefault();
		}

		screenCanvasElement.addEventListener(
			"dragover",
			e => {
				cancel(e);

				if (e.dataTransfer) {
					e.dataTransfer.dropEffect = "copy";
				}
			},
			false
		);

		screenCanvasElement.addEventListener(
			"drop",
			e => {
				cancel(e);

				if (e.dataTransfer) {
					vim.dropFiles(e.dataTransfer.files).catch(console.error);
				}
			},
			false
		);

		vim.onVimExit = status => {
			alert(`Vim exited with status ${status}`);
		};

		vim.onFileExport = (fullpath, contents) => {
			const ABFAB_ROOT = "/db/my-app";
			console.log(fullpath, contents);
			const decoder = new TextDecoder("utf-8");
			const source = decoder.decode(contents);

			fetch(pathname + "/@upload/file", {
				method: "PATCH",
				headers: {
					Accept: "application/json",
					"Content-Type": "application/octet-stream",
					"X-UPLOAD-FILENAME": filename,
					Authorization: "Basic " + btoa("root:root")
				},
				body: contents
			});

			if (isSvelte) {
				const { js } = compile(source, {
					sveltePath: ABFAB_ROOT + "/node_modules/svelte"
				});

				const jsFilePath = pathname + ".js";

				fetch(jsFilePath, {
					method: "PUT",
					headers: {
						Accept: "application/json",
						"Content-Type": "application/json",
						Authorization: "Basic " + btoa("root:root")
					},
					body: { "@type": "File", "id": filename + ".js" }
				});

				const body = js.replace(RE, "from \"$1/index.mjs\";");

				fetch(jsFilePath + "/@upload/file", {
					method: "PATCH",
					headers: {
						Accept: "application/json",
						"Content-Type": "application/octet-stream",
						"X-UPLOAD-FILENAME": filename + ".js",
						Authorization: "Basic " + btoa("root:root")
					},
					body
				});
			}
		};

		vim.readClipboard = navigator.clipboard.readText;
		vim.onWriteClipboard = navigator.clipboard.writeText;
		vim.onError = console.error;
		let options = "set number\nautocmd BufWritePost * export";

		if (isSvelte) {
			options += "\nset filetype=html";
		}

		vim.start({
			// cmdArgs: ['/test.svelte', '-c', 'set number\nset filetype=html'],
			cmdArgs: [filename, "-c", "set number\nautocmd BufWritePost * export"],
			// dirs: ['/'],
			// fetchFiles: { [location.pathname]: 'http://localhost:8080/db/my-app/views/component/render.js' },
			files: { [filename]: context }, //     '/test.svelte': '<h1>hello, world!</h1>',
			//     // '/.vim/vimrc': 'set number\nset noexpandtab\nau BufRead,BufNewFile *.svelte set filetype=html',
			
		});
	}

	$$self.$$set = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
	};

	return [context];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-xy4k9h-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { context: 0 });
	}
}

export default Component;